
## [IMO-21618] Steps to Set up FSL Service

### Steps to create endpoint in UPI Circle

<!-- Put image here -->

UPI Circle consists of the following projects:

- `com-fsl-microservice-paymentupicircle` (Endpoints/API)
- `com-fsl-microservice-paymentupicircle-model` (Inbound Models)
- `com-fsl-outbound-paymentupicircle-model` (Outbound Models)

---

### Step 1: Create Controller and Service

1. Create package for controller and service depending on type of service.

#### 1. Integration Service

- **Package Name:**  
  `com.fsl.payment.integ.upicirclegetlinkdelegatedetails`  
  Represents integration service which contains controller and service.

- **Controller:**  
  `UpiCircleGetLinkedDelegateDetailsICntlr`  
  *(Integration controller ends with ICntlr)*

- **Service:**  
  `UpiCircleGetLinkedDelegateDetailsISvc`  
  *(Integration service ends with ISvc)*

- **High level implementation/override functions in service**  
  *(Assuming service extends `BaseUpiProfileEmbIntegrationService`)*

  1. `prepare_UPI_request` – Read input request (inbound) and prepare outbound input
  2. `prepare_MW_response` – Read outbound output and prepare inbound response
  3. `prepare_MW_response_OnFailure` – Need to explore
  4. `integrationEndpointID` – Return service ID
  5. `myUpiProfileIntegRequestBodyType` – Return inbound input
  6. `upiOutputDataType` – Return outbound output
  7. `customValidations` – Need to explore

#### 2. Orchestration Service: Chain Orchestration

- **Package Name:**  
  `com.fsl.payment.orchc.upicirclegetlinkdelegatedetails`

- **Controller:**  
  `UpiCircleGetLinkedDelegateDetailsCCntlr`

- **Service:**  
  `UpiCircleGetLinkedDelegateDetailsCSvc`

- **Functions** *(Assuming it extends `MWOrchestratedChainService`)*

  1. `customValidations` – Need to explore
  2. `eval` – Need to explore
  3. `prepare_ChainRequest` – Prepare inbound input for chain
  4. `prepare_MW_response` – Prepare response to UI
  5. `myRequestBodyType` – Return inbound input
  6. `innerServiceOutputPayloadTypes` – Map service ID to type

#### 3. Orchestration Service: Parallel Orchestration

- **Package Name:**  
  `com.fsl.payment.orchp.upicirclegetlinkdelegatedetails`

- **Controller:**  
  `UpiCircleGetLinkedDelegateDetailsPCntlr`

- **Service:**  
  `UpiCircleGetLinkedDelegateDetailsPSvc`

---

### Step 2: Create Inbound Models

1. Create package for inbound models depending on service type

#### 1. Integration Service

- **Package Name:**  
  `com.fsl.payment.integ.upicirclegetlinkdelegatedetail`

- **Classes:**
  - `UpiCircleGetLinkDelegateDetailsIReqBody` – Request body
  - `UpiCircleGetLinkDelegateDetailsIResBody` – Response body

#### 2. Orchestration: Chain

- **Package Name:**  
  `com.fsl.payment.orchc.upicirclegetlinkdelegatedetail`

- **Classes:**
  - `UpiCircleGetLinkDelegateDetailsCReqBody`
  - `UpiCircleGetLinkDelegateDetailsCResBody`

#### 3. Orchestration: Parallel

- **Package Name:**  
  `com.fsl.payment.orchp.upicirclegetlinkdelegatedetail`

- **Classes:**
  - `UpiCircleGetLinkDelegateDetailsPReqBody`
  - `UpiCircleGetLinkDelegateDetailsPResBody`

---

### Step 3: Create Outbound Models

1. Create package for outbound models depending on type of service

#### 1. Integration Service

- **Package Name:**  
  `com.fsl.outbound.payment.upicirclegetlinkdelegatedetail`

- **Classes:**
  - `UpiCircleGetLinkDelegateDetailsIInput`
  - `UpiCircleGetLinkDelegateDetailsIOutput`

#### 2. Orchestration Service: Chain Orchestration
(*To be added*)

#### 3. Orchestration Service: Parallel Orchestration
(*To be added*)

---

### Step 4: Add Endpoint URL in `paymentupicircle-dev.properties`

Example:

```properties
FWK.EAI.UpiCircleGetLKinkDelegateDetailsC.url=### CODEGEN: UpiCircleGetLKinkDelegateDetailsC
FWK.EAI.UpiCircleGetLinkedDelegateDetailsI.url=### CODEGEN: UpiCircleGetLinkedDelegateDetailsI
```

---

### Step 5: Create Swagger Contract (.yaml)

For each request/response, add swagger contract in  
`resources/schemas` folder of `com-fsl-microservice-paymentupicircle`.

Examples:

- `UpiCircleGetLinkedDelegateDetailsI.yaml` – Integration
- `UpiCircleGetLinkedDelegateDetailsC.yaml` – Chain Orchestration
- `UpiCircleGetLinkedDelegateDetailsP.yaml` – Parallel Orchestration

---

### Step 6: Write JSON Unit Test for Swagger Contracts

---

### Step 7: Add Chain/Parallel Config XML

In `resources/orch` of `com-fsl-microservice-paymentupicircle`:

- Chain: `UpiCircleGetLinkedDelegateDetailsC.xml`
- Parallel: `UpiCircleGetLinkedDelegateDetailsP.xml`  
  *(Refer `UpiVpaAddrValidateP.xml` for config)*

---

### Step 8: Add Integration Endpoint in `fsl-dev.properties`

```properties
FWK.EAI.UpiCircleGetLinkedDelegateDetailsI.url=https://apiampuat.icicibankltd.com/v1/api/UPI2_0/GetLinkDelegateDetails
```
